
None # 查阅文档

查找模块中的所有函数和类
------------------------

为了知道模块中可以调用哪些函数和类，我们调用\ ``dir``\ 函数。
例如，我们可以查询随机数生成模块中的所有属性：

.. code:: python

    from mxnet import np
    
    print(dir(np.random))


.. parsed-literal::
    :class: output

    ['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_mx_nd_np', 'beta', 'chisquare', 'choice', 'exponential', 'gamma', 'gumbel', 'logistic', 'lognormal', 'multinomial', 'multivariate_normal', 'normal', 'pareto', 'power', 'rand', 'randint', 'randn', 'rayleigh', 'shuffle', 'uniform', 'weibull']


.. code:: python

    import paddle
    
    print(dir(paddle.distribution))


.. parsed-literal::
    :class: output

    ['Categorical', 'Distribution', 'Normal', 'Uniform', '_C_ops', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'arange', 'check_dtype', 'check_type', 'check_variable_and_dtype', 'concat', 'control_flow', 'convert_dtype', 'core', 'elementwise_add', 'elementwise_div', 'elementwise_mul', 'elementwise_sub', 'gather_nd', 'in_dygraph_mode', 'math', 'multinomial', 'nn', 'np', 'ops', 'print_function', 'tensor', 'warnings']


通常，我们可以忽略以“``__``”（双下划线）开始和结束的函数（它们是Python中的特殊对象），
或以单个“``_``”（单下划线）开始的函数（它们通常是内部函数）。
根据剩余的函数名或属性名，我们可能会猜测这个模块提供了各种生成随机数的方法，
包括从均匀分布（\ ``uniform``\ ）、正态分布（\ ``normal``\ ）和多项分布（\ ``multinomial``\ ）中采样。

查找特定函数和类的用法
----------------------

有关如何使用给定函数或类的更具体说明，我们可以调用\ ``help``\ 函数。
例如，我们来查看张量\ ``ones``\ 函数的用法。

.. code:: python

    help(np.ones)


.. parsed-literal::
    :class: output

    Help on function ones in module mxnet.numpy:
    
    ones(shape, dtype=<class 'numpy.float32'>, order='C', ctx=None)
        Return a new array of given shape and type, filled with ones.
        This function currently only supports storing multi-dimensional data
        in row-major (C-style).
        
        Parameters
        ----------
        shape : int or tuple of int
            The shape of the empty array.
        dtype : str or numpy.dtype, optional
            An optional value type. Default is `numpy.float32`. Note that this
            behavior is different from NumPy's `ones` function where `float64`
            is the default value, because `float32` is considered as the default
            data type in deep learning.
        order : {'C'}, optional, default: 'C'
            How to store multi-dimensional data in memory, currently only row-major
            (C-style) is supported.
        ctx : Context, optional
            An optional device context (default is the current default context).
        
        Returns
        -------
        out : ndarray
            Array of ones with the given shape, dtype, and ctx.
        
        Examples
        --------
        >>> np.ones(5)
        array([1., 1., 1., 1., 1.])
        
        >>> np.ones((5,), dtype=int)
        array([1, 1, 1, 1, 1], dtype=int64)
        
        >>> np.ones((2, 1))
        array([[1.],
               [1.]])
        
        >>> s = (2,2)
        >>> np.ones(s)
        array([[1., 1.],
               [1., 1.]])
    


.. code:: python

    help(paddle.ones)


.. parsed-literal::
    :class: output

    Help on function ones in module paddle.tensor.creation:
    
    ones(shape, dtype=None, name=None)
        The OP creates a tensor of specified :attr:`shape` and :attr:`dtype`, and fills it with 1.
        
        Args:
            shape(tuple|list|Tensor): Shape of the Tensor to be created, the data type of shape is int32 or int64.
            dtype(np.dtype|str, optional): Data type of output Tensor, it supports
                bool, float16, float32, float64, int32 and int64. Default: if None, the data type is 'float32'.
            name(str, optional): The default value is None. Normally there is no need for user to set this property. For more information, please refer to :ref:`api_guide_Name`
        
        Returns:
            Tensor: A tensor of data type :attr:`dtype` with shape :attr:`shape` and all elements set to 1.
        
        Examples:
            .. code-block:: python
        
              import paddle 
              
              # default dtype for ones OP
              data1 = paddle.ones(shape=[3, 2]) 
              # [[1. 1.]
              #  [1. 1.]
              #  [1. 1.]]
              
              data2 = paddle.ones(shape=[2, 2], dtype='int32') 
              # [[1 1]
              #  [1 1]]
              
              # shape is a Tensor
              shape = paddle.full(shape=[2], dtype='int32', fill_value=2)
              data3 = paddle.ones(shape=shape, dtype='int32') 
              # [[1 1]
              #  [1 1]]
    


从文档中，我们可以看到\ ``ones``\ 函数创建一个具有指定形状的新张量，并将所有元素值设置为1。
让我们来运行一个快速测试来确认这一解释：

.. code:: python

    np.ones(4)




.. parsed-literal::
    :class: output

    array([1., 1., 1., 1.])



.. code:: python

    paddle.ones([4])




.. parsed-literal::
    :class: output

    Tensor(shape=[4], dtype=float32, place=CPUPlace, stop_gradient=True,
           [1., 1., 1., 1.])



在Jupyter记事本中，我们可以使用\ ``?``\ 指令在另一个浏览器窗口中显示文档。
例如，\ ``list?``\ 指令将创建与\ ``help(list)``\ 指令几乎相同的内容，并在新的浏览器窗口中显示它。
此外，如果我们使用两个问号，如\ ``list??``\ ，将显示实现该函数的Python代码。

小结
----

-  官方文档提供了本书之外的大量描述和示例。
-  我们可以通过调用\ ``dir``\ 和\ ``help``\ 函数或在Jupyter记事本中使用\ ``?``\ 和\ ``??``\ 查看API的用法文档。

练习
----

1. 在深度学习框架中查找任何函数或类的文档。你能在这个框架的官方网站上找到文档吗?
